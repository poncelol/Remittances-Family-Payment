// bot.js - Bot de Telegram con Open Payments integrado
const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const OpenPaymentsClient = require('./openPayments');

// Crear bot de Telegram
const bot = new TelegramBot(config.telegram.token, { polling: true });

// Variable global para el cliente de Open Payments
let openPaymentsClient = null;

// FUNCI√ìN DE INICIALIZACI√ìN CORREGIDA
async function initializeBot() {
    try {
        console.log('ü§ñ Iniciando Bot de Pagos Interledger...');

        // Inicializar cliente OpenPayments
        openPaymentsClient = new OpenPaymentsClient(config.openPayments);

        // Mostrar wallets (verificaci√≥n b√°sica de conexi√≥n)
        const walletA = await openPaymentsClient.getWalletAddress(openPaymentsClient.walletAddressA);
        const walletB = await openPaymentsClient.getWalletAddress(openPaymentsClient.walletAddressB);

        console.log('‚úÖ Conexi√≥n b√°sica verificada con Open Payments');
        console.log(`   Wallet A: ${walletA.id}`);
        console.log(`   Wallet B: ${walletB.id}`);

        console.log('üöÄ Bot iniciado y listo para recibir comandos');
        console.log('üì± Busca tu bot en Telegram y env√≠a /start');

        return openPaymentsClient;
    } catch (error) {
        console.error('‚ùå Error inicializando:', error.message);
        throw error;
    }
}

// FUNCI√ìN PARA MANEJAR PAGOS
async function handlePayment(amount, description, chatId) {
    try {
        if (!openPaymentsClient) {
            throw new Error('Cliente no inicializado');
        }

        await bot.sendMessage(chatId, '‚è≥ Procesando pago...');

        const result = await openPaymentsClient.sendPayment(amount, description);

        if (result.success) {
            const successMessage = `
‚úÖ *¬°Pago exitoso!*

üí∞ Cantidad: $${result.amount}
üìù Descripci√≥n: ${description}
üÜî ID del pago: \`${result.paymentId}\`
üìä Estado: ${result.state}
üîó Incoming Payment: \`${result.incomingPaymentId}\`
üìã Quote: \`${result.quoteId}\`

‚ú® Pago completado exitosamente
            `;
            await bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
            return result;
        } else {
            const errorMessage = `
‚ùå *Error en el pago*

üí∞ Cantidad: $${amount}
üìù Descripci√≥n: ${description}
‚ö†Ô∏è Error: ${result.error}

Por favor, intenta nuevamente o contacta soporte.
            `;
            await bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
            return result;
        }
    } catch (error) {
        const criticalErrorMessage = `
üö® *Error cr√≠tico*

No se pudo procesar el pago.
Error: ${error.message}

Por favor, verifica tu configuraci√≥n.
        `;
        await bot.sendMessage(chatId, criticalErrorMessage, { parse_mode: 'Markdown' });
        return { success: false, error: error.message };
    }
}

// COMANDOS DEL BOT
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `
ü§ñ *Bot de Pagos Interledger*

¬°Hola! Puedo ayudarte a realizar pagos usando Open Payments.

*Comandos disponibles:*
/balance - Ver informaci√≥n de wallets
/send [cantidad] [descripci√≥n] - Enviar pago
/test - Probar conexi√≥n
/help - Ver esta ayuda

*Ejemplo:*
\`/send 10.50 Pago de prueba\`
    `;
    await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
});

bot.onText(/\/test/, async (msg) => {
    const chatId = msg.chat.id;

    if (!openPaymentsClient) {
        await bot.sendMessage(chatId, '‚ùå Cliente no inicializado');
        return;
    }

    await bot.sendMessage(chatId, 'üß™ Probando conexi√≥n con wallets...');

    try {
        const walletA = await openPaymentsClient.getWalletAddress(openPaymentsClient.walletAddressA);
        const walletB = await openPaymentsClient.getWalletAddress(openPaymentsClient.walletAddressB);

        const message = `
‚úÖ *Conexi√≥n verificada*

üîπ Wallet A (Remitente):
   ID: \`${walletA.id}\`
   Asset: ${walletA.assetCode || 'USD'}
   Scale: ${walletA.assetScale || 2}

üîπ Wallet B (Receptor):
   ID: \`${walletB.id}\`
   Asset: ${walletB.assetCode || 'USD'}
   Scale: ${walletB.assetScale || 2}

‚ö†Ô∏è *Nota:* Para realizar pagos reales necesitas configurar tokens GNAP
        `;
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå Error consultando wallets: ${error.message}`);
    }
});

bot.onText(/\/send (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const params = match[1].split(' ');

    if (params.length < 1) {
        await bot.sendMessage(chatId, '‚ùå Formato: /send [cantidad] [descripci√≥n opcional]');
        return;
    }

    const amount = parseFloat(params[0]);
    const description = params.slice(1).join(' ') || 'Pago v√≠a bot Telegram';

    if (isNaN(amount) || amount <= 0) {
        await bot.sendMessage(chatId, '‚ùå La cantidad debe ser un n√∫mero positivo');
        return;
    }

    if (amount > 1000) {
        await bot.sendMessage(chatId, '‚ùå Cantidad m√°xima permitida: $1000');
        return;
    }

    console.log(`üí∏ Procesando pago de $${amount} - "${description}"`);
    await handlePayment(amount, description, chatId);
});

bot.onText(/\/balance/, async (msg) => {
    const chatId = msg.chat.id;

    if (!openPaymentsClient) {
        await bot.sendMessage(chatId, '‚ùå Cliente no inicializado');
        return;
    }

    try {
        await bot.sendMessage(chatId, 'üìä Consultando informaci√≥n de wallets...');

        const walletA = await openPaymentsClient.getWalletAddress(openPaymentsClient.walletAddressA);
        const walletB = await openPaymentsClient.getWalletAddress(openPaymentsClient.walletAddressB);

        const message = `
üìä *Informaci√≥n de Wallets*

üîπ *Wallet Remitente (A):*
   Address: \`${openPaymentsClient.walletAddressA}\`
   ID: \`${walletA.id}\`
   Asset: ${walletA.assetCode || 'USD'}
   Scale: ${walletA.assetScale || 2}

üîπ *Wallet Receptor (B):*
   Address: \`${openPaymentsClient.walletAddressB}\`
   ID: \`${walletB.id}\`
   Asset: ${walletB.assetCode || 'USD'}
   Scale: ${walletB.assetScale || 2}

‚ÑπÔ∏è *Nota:* Los balances espec√≠ficos requieren autenticaci√≥n adicional
        `;

        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå Error consultando wallets: ${error.message}`);
    }
});

bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;

    const helpMessage = `
ü§ñ *Ayuda - Bot de Pagos Interledger*

*Comandos disponibles:*

/start - Iniciar el bot
/test - Verificar conexi√≥n con wallets
/balance - Ver informaci√≥n de wallets
/send [cantidad] [descripci√≥n] - Enviar pago
/help - Ver esta ayuda

*Ejemplos de uso:*
\`/send 5.00\`
\`/send 10.50 Pago de prueba\`
\`/send 25 Transferencia urgente\`

*L√≠mites:*
‚Ä¢ Cantidad m√≠nima: $0.01
‚Ä¢ Cantidad m√°xima: $1000.00
‚Ä¢ Moneda: USD

*Estado actual:*
${openPaymentsClient ? '‚úÖ Cliente inicializado' : '‚ùå Cliente no inicializado'}

‚ö†Ô∏è *Importante:* Para pagos reales necesitas configurar tokens GNAP
    `;
    await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

// Manejar errores del bot
bot.on('error', (error) => console.error('‚ùå Error del bot:', error));
bot.on('polling_error', (error) => console.error('‚ùå Error de polling:', error));

// INICIALIZAR APLICACI√ìN
async function main() {
    try {
        await initializeBot();

        console.log('\nüéØ Bot listo para usar!');
        console.log('üìù Comandos de prueba:');
        console.log('   /test - Verificar conexi√≥n');
        console.log('   /balance - Ver wallets');
        console.log('   /send 1.00 Prueba - Enviar $1');
    } catch (error) {
        console.error('‚ùå Error fatal:', error.message);
        process.exit(1);
    }
}

// Ejecutar aplicaci√≥n
if (require.main === module) {
    main();
}

module.exports = {
    bot,
    openPaymentsClient,
    handlePayment,
    initializeBot
};
